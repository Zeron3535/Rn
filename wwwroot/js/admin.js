// Admin panel JavaScript functionality

// Document ready function
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Initialize popovers
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });

    // Initialize date pickers
    initDatePickers();

    // Initialize business hours form
    initBusinessHoursForm();

    // Initialize delete confirmations
    initDeleteConfirmations();

    // Initialize slug generator
    initSlugGenerator();

    // Initialize animations
    initAnimations();

    // Initialize dashboard counters
    initDashboardCounters();
});

// Initialize date pickers
function initDatePickers() {
    const datePickers = document.querySelectorAll('.datepicker');
    if (datePickers.length === 0) return;

    datePickers.forEach(picker => {
        picker.addEventListener('change', function() {
            if (this.id === 'appointmentDate') {
                loadAppointmentsForDate(this.value);
            }
        });
    });
}

// Load appointments for a specific date
function loadAppointmentsForDate(date) {
    if (!date) return;
    window.location.href = `/Admin/Appointments?date=${date}`;
}

// Initialize business hours form
function initBusinessHoursForm() {
    const businessHoursForms = document.querySelectorAll('.business-hours-form');
    if (businessHoursForms.length === 0) return;

    businessHoursForms.forEach(form => {
        const isOpenCheckbox = form.querySelector('.is-open-checkbox');
        const timeInputs = form.querySelectorAll('.time-input');

        if (isOpenCheckbox) {
            isOpenCheckbox.addEventListener('change', function() {
                timeInputs.forEach(input => {
                    input.disabled = !this.checked;
                });
            });

            // Initial state
            timeInputs.forEach(input => {
                input.disabled = !isOpenCheckbox.checked;
            });
        }
    });
}

// Initialize delete confirmations
function initDeleteConfirmations() {
    const deleteButtons = document.querySelectorAll('.delete-button');
    if (deleteButtons.length === 0) return;

    deleteButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            if (!confirm('Bu öğeyi silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.')) {
                event.preventDefault();
            }
        });
    });
}

// Initialize slug generator
function initSlugGenerator() {
    const nameInputs = document.querySelectorAll('.slug-source');
    if (nameInputs.length === 0) return;

    nameInputs.forEach(input => {
        const slugInput = document.querySelector(input.dataset.slugTarget);
        if (!slugInput) return;

        input.addEventListener('input', function() {
            if (slugInput.value === '' || slugInput.dataset.autoGenerated === 'true') {
                slugInput.value = generateSlug(this.value);
                slugInput.dataset.autoGenerated = 'true';
            }
        });

        // If slug is manually edited, stop auto-generation
        slugInput.addEventListener('input', function() {
            this.dataset.autoGenerated = 'false';
        });
    });
}

// Generate slug from text
function generateSlug(text) {
    return text
        .toString()
        .toLowerCase()
        .trim()
        .replace(/ı/g, 'i')
        .replace(/ğ/g, 'g')
        .replace(/ü/g, 'u')
        .replace(/ş/g, 's')
        .replace(/ö/g, 'o')
        .replace(/ç/g, 'c')
        .replace(/[^\w\s-]/g, '')
        .replace(/[\s_-]+/g, '-')
        .replace(/^-+|-+$/g, '');
}

// Format currency
function formatCurrency(amount) {
    return new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(amount);
}

// Format date
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('tr-TR');
}

// Format time
function formatTime(timeString) {
    return timeString.substring(0, 5);
}

// Initialize animations
function initAnimations() {
    // Add fade-in animation to dashboard stats
    const dashboardStats = document.querySelectorAll('.dashboard-stat');
    if (dashboardStats.length > 0) {
        dashboardStats.forEach((stat, index) => {
            stat.classList.add('fadeInUp');
            stat.style.animationDelay = `${index * 0.1}s`;
        });
    }

    // Add fade-in animation to cards
    const cards = document.querySelectorAll('.card');
    if (cards.length > 0) {
        cards.forEach((card, index) => {
            if (!card.closest('.dashboard-stat')) { // Avoid double animation on dashboard stats
                card.classList.add('fadeIn');
                card.style.animationDelay = `${0.2 + (index * 0.1)}s`;
            }
        });
    }

    // Add animation to tables
    const tables = document.querySelectorAll('.table');
    if (tables.length > 0) {
        tables.forEach(table => {
            table.classList.add('fadeIn');
            table.style.animationDelay = '0.3s';

            // Animate table rows
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach((row, index) => {
                row.classList.add('fadeInRight');
                row.style.animationDelay = `${0.4 + (index * 0.05)}s`;
                row.style.opacity = '0';
                row.style.animationFillMode = 'forwards';
            });
        });
    }

    // Add hover effect to action buttons
    const actionButtons = document.querySelectorAll('.admin-action-buttons .btn');
    if (actionButtons.length > 0) {
        actionButtons.forEach(button => {
            button.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-3px)';
                this.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.15)';
            });

            button.addEventListener('mouseleave', function() {
                this.style.transform = '';
                this.style.boxShadow = '';
            });
        });
    }
}

// Initialize dashboard counters
function initDashboardCounters() {
    const numberElements = document.querySelectorAll('.dashboard-stat-number');
    if (numberElements.length === 0) return;

    numberElements.forEach(element => {
        const finalValue = parseInt(element.textContent);
        if (isNaN(finalValue)) return;

        // Start from zero
        element.textContent = '0';

        // Animate to final value
        let startTime;
        const duration = 1500; // 1.5 seconds

        function animate(currentTime) {
            if (!startTime) startTime = currentTime;
            const elapsedTime = currentTime - startTime;
            const progress = Math.min(elapsedTime / duration, 1);

            const currentValue = Math.floor(progress * finalValue);
            element.textContent = currentValue;

            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                element.textContent = finalValue;
            }
        }

        // Start animation after a delay based on element index
        setTimeout(() => {
            requestAnimationFrame(animate);
        }, 500); // 0.5 second delay
    });
}
