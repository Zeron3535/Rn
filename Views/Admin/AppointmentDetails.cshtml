@model Appointment
@{
    ViewData["Title"] = "Randevu Detayları";
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h2">Randevu Detayları</h1>
        <a href="@Url.Action("Appointments", "Admin", new { date = Model.AppointmentDate.ToString("yyyy-MM-dd") })" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i> Randevulara Dön
        </a>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h2 class="h5 mb-0">Randevu Bilgileri</h2>
                    <span class="badge bg-primary">ID: @Model.Id</span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h3 class="h6 text-muted mb-3">Müşteri Bilgileri</h3>
                            <p><strong><i class="fas fa-user me-2"></i> Müşteri Adı:</strong> @Model.CustomerName</p>
                            <p><strong><i class="fas fa-phone me-2"></i> Telefon:</strong> @Model.PhoneNumber</p>
                            @if (!string.IsNullOrEmpty(Model.Notes))
                            {
                                <p><strong><i class="fas fa-sticky-note me-2"></i> Notlar:</strong> @Model.Notes</p>
                            }
                        </div>
                        <div class="col-md-6">
                            <h3 class="h6 text-muted mb-3">Randevu Detayları</h3>
                            <p><strong><i class="fas fa-calendar-day me-2"></i> Tarih:</strong> @Model.AppointmentDate.ToString("dd.MM.yyyy, dddd")</p>
                            <p><strong><i class="fas fa-clock me-2"></i> Saat:</strong> @Model.StartTime.ToString(@"hh\:mm") - @Model.EndTime.ToString(@"hh\:mm")</p>
                            <p><strong><i class="fas fa-hourglass-half me-2"></i> Toplam Süre:</strong> @Model.GetTotalDuration() dakika</p>
                            <p><strong><i class="fas fa-money-bill-wave me-2"></i> Toplam Ücret:</strong> @Model.GetTotalPrice().ToString("C0")</p>

                            <div class="mt-3">
                                <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="collapse" data-bs-target="#editTimeCollapse">
                                    <i class="fas fa-edit me-1"></i> Saati Düzenle
                                </button>
                                
                                <div class="collapse mt-3" id="editTimeCollapse">
                                    <div class="card card-body">
                                        <form asp-action="UpdateAppointmentTime" method="post" id="editTimeForm">
                                            <input type="hidden" name="id" value="@Model.Id" />
                                            <div class="row g-2">
                                                <div class="col-md-6">
                                                    <label class="form-label">Başlangıç Saati</label>
                                                    <input type="time" name="startTime" id="startTimeInput" class="form-control" value="@Model.StartTime.ToString(@"hh\:mm")" required min="00:00" max="23:59" />
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Bitiş Saati</label>
                                                    <input type="time" name="endTime" id="endTimeInput" class="form-control" value="@Model.EndTime.ToString(@"hh\:mm")" required min="00:00" max="23:59" />
                                                </div>
                                                <div class="col-12 mt-3">
                                                    <div class="alert alert-info">
                                                        <small><i class="fas fa-info-circle me-1"></i> Toplam süre: <span id="durationDisplay">@Model.GetTotalDuration() dakika</span></small>
                                                    </div>
                                                </div>
                                                <div class="col-12 mt-2">
                                                    <button type="submit" class="btn btn-primary btn-sm">
                                                        <i class="fas fa-save me-1"></i> Saati Güncelle
                                                    </button>
                                                    <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-toggle="collapse" data-bs-target="#editTimeCollapse">
                                                        <i class="fas fa-times me-1"></i> İptal
                                                    </button>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <hr />

                    <h3 class="h6 text-muted mb-3">Durum Bilgisi</h3>
                    <div class="d-flex align-items-center mb-3">
                        <span class="me-3"><strong>Mevcut Durum:</strong></span>
                        @switch (Model.Status)
                        {
                            case AppointmentStatus.Pending:
                                <span class="badge bg-warning">Bekliyor</span>
                                break;
                            case AppointmentStatus.Confirmed:
                                <span class="badge bg-success">Onaylandı</span>
                                break;
                            case AppointmentStatus.Completed:
                                <span class="badge bg-info">Tamamlandı</span>
                                break;
                            case AppointmentStatus.Cancelled:
                                <span class="badge bg-danger">İptal Edildi</span>
                                break;
                        }
                    </div>

                    <form asp-action="UpdateAppointmentStatus" method="post" class="row g-3">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <div class="col-md-6">
                            <select name="status" class="form-select">
                                <option value="@AppointmentStatus.Pending" selected="@(Model.Status == AppointmentStatus.Pending)">Bekliyor</option>
                                <option value="@AppointmentStatus.Confirmed" selected="@(Model.Status == AppointmentStatus.Confirmed)">Onaylandı</option>
                                <option value="@AppointmentStatus.Completed" selected="@(Model.Status == AppointmentStatus.Completed)">Tamamlandı</option>
                                <option value="@AppointmentStatus.Cancelled" selected="@(Model.Status == AppointmentStatus.Cancelled)">İptal Edildi</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i> Durumu Güncelle
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h2 class="h5 mb-0">Seçilen Hizmetler</h2>
                </div>
                <div class="card-body">
                    @if (Model.AppointmentServices.Any())
                    {
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Hizmet Adı</th>
                                        <th>Kategori</th>
                                        <th>Süre</th>
                                        <th>Fiyat</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var appointmentService in Model.AppointmentServices)
                                    {
                                        <tr>
                                            <td>@appointmentService.Service?.Name</td>
                                            <td>@appointmentService.Service?.Category?.Name</td>
                                            <td>@appointmentService.Service?.DurationMinutes dakika</td>
                                            <td>@appointmentService.Service?.Price.ToString("C0")</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="table-light">
                                        <th colspan="2">Toplam</th>
                                        <th>@Model.GetTotalDuration() dakika</th>
                                        <th>@Model.GetTotalPrice().ToString("C0")</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i> Bu randevu için hizmet seçilmemiş.
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0"><i class="fas fa-info-circle me-2"></i> Sistem Bilgileri</h2>
                </div>
                <div class="card-body">
                    <p><strong>Oluşturulma Tarihi:</strong> @Model.CreatedAt.ToString("dd.MM.yyyy HH:mm")</p>
                    <p><strong>Son Güncelleme:</strong> @DateTime.Now.ToString("dd.MM.yyyy HH:mm")</p>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h2 class="h5 mb-0"><i class="fas fa-phone-alt me-2"></i> Hızlı İletişim</h2>
                </div>
                <div class="card-body">
                    <p>Müşteri ile iletişime geçmek için:</p>
                    <div class="d-grid gap-2">
                        <a href="tel:@Model.PhoneNumber" class="btn btn-outline-secondary">
                            <i class="fas fa-phone me-2"></i> Ara: @Model.PhoneNumber
                        </a>
                        <a href="https://wa.me/@Model.PhoneNumber.Replace(" ", "").Replace("-", "")" target="_blank" class="btn btn-success">
                            <i class="fab fa-whatsapp me-2"></i> WhatsApp Mesajı Gönder
                        </a>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header bg-danger text-white">
                    <h2 class="h5 mb-0"><i class="fas fa-trash me-2"></i> Randevu İşlemleri</h2>
                </div>
                <div class="card-body">
                    <p>Bu randevuyu silmek istiyorsanız:</p>
                    <form asp-action="AppointmentDelete" asp-route-id="@Model.Id" method="post" onsubmit="return confirm('Bu randevuyu silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.');">
                        <div class="d-grid">
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-trash me-2"></i> Randevuyu Sil
                            </button>
                        </div>
                    </form>

                    <div class="alert alert-warning mt-3 mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i> <strong>Uyarı:</strong> Silinen randevular geri alınamaz ve müşteriye otomatik bildirim gönderilmez.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Time edit form
            const editTimeForm = document.getElementById('editTimeForm');
            const startTimeInput = document.getElementById('startTimeInput');
            const endTimeInput = document.getElementById('endTimeInput');
            const durationDisplay = document.getElementById('durationDisplay');
            
            // Helper function to ensure time is in HH:MM format
            function formatTime(timeString) {
                if (!timeString) return '';
                
                // If already in proper format
                if (/^\d{2}:\d{2}$/.test(timeString)) {
                    return timeString;
                }
                
                try {
                    // Split the time string and format
                    const parts = timeString.split(':');
                    if (parts.length >= 2) {
                        const hours = parts[0].padStart(2, '0');
                        const minutes = parts[1].padStart(2, '0');
                        return `${hours}:${minutes}`;
                    }
                    
                    // Default time if can't parse
                    return "00:00";
                } catch (err) {
                    console.error('Error formatting time:', err);
                    return "00:00";
                }
            }
            
            // Ensure time inputs have proper format on load
            if (startTimeInput && endTimeInput) {
                startTimeInput.value = formatTime(startTimeInput.value);
                endTimeInput.value = formatTime(endTimeInput.value);
            }
            
            // Update duration when time inputs change
            function updateDuration() {
                if (startTimeInput && endTimeInput && durationDisplay) {
                    try {
                        const startTime = startTimeInput.value;
                        const endTime = endTimeInput.value;
                        
                        if (!startTime || !endTime) return;
                        
                        // Parse times
                        const [startHours, startMinutes] = startTime.split(':').map(Number);
                        const [endHours, endMinutes] = endTime.split(':').map(Number);
                        
                        // Calculate duration in minutes
                        const startTotalMinutes = startHours * 60 + startMinutes;
                        const endTotalMinutes = endHours * 60 + endMinutes;
                        const duration = endTotalMinutes - startTotalMinutes;
                        
                        if (duration <= 0) {
                            durationDisplay.textContent = "Geçersiz süre (başlangıç bitiş saatinden sonra)";
                            durationDisplay.classList.add('text-danger');
                        } else {
                            durationDisplay.textContent = duration + " dakika";
                            durationDisplay.classList.remove('text-danger');
                        }
                    } catch (error) {
                        console.error('Error updating duration:', error);
                        durationDisplay.textContent = "Süre hesaplanamadı";
                    }
                }
            }
            
            // Add event listeners
            if (startTimeInput && endTimeInput) {
                startTimeInput.addEventListener('change', function() {
                    startTimeInput.value = formatTime(startTimeInput.value);
                    updateDuration();
                });
                
                endTimeInput.addEventListener('change', function() {
                    endTimeInput.value = formatTime(endTimeInput.value);
                    updateDuration();
                });
                
                // Initial update
                updateDuration();
            }
            
            // Form validation
            if (editTimeForm) {
                editTimeForm.addEventListener('submit', function(event) {
                    const startTime = startTimeInput.value;
                    const endTime = endTimeInput.value;
                    
                    if (!startTime || !endTime) {
                        event.preventDefault();
                        alert('Lütfen başlangıç ve bitiş saatlerini belirtin.');
                        return false;
                    }
                    
                    // Parse times
                    const [startHours, startMinutes] = startTime.split(':').map(Number);
                    const [endHours, endMinutes] = endTime.split(':').map(Number);
                    
                    // Calculate duration in minutes
                    const startTotalMinutes = startHours * 60 + startMinutes;
                    const endTotalMinutes = endHours * 60 + endMinutes;
                    
                    if (startTotalMinutes >= endTotalMinutes) {
                        event.preventDefault();
                        alert('Başlangıç saati bitiş saatinden önce olmalıdır.');
                        return false;
                    }
                    
                    return true;
                });
            }
        });
    </script>
}
